{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n\n// Load your modules here, e.g.:\nimport * as WebSockeClient from \"websocket\";\n\nclass Alphainnotec extends utils.Adapter {\n\tdeclare private ws;\n\tdeclare private connection;\n\tdeclare private items;\n\tdeclare private poller;\n\tdeclare private status;\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"alphainnotec\",\n\t\t});\n\n\t\tthis.ws = new WebSockeClient.client();\n\t\tthis.connection;\n\t\tthis.poller;\n\t\tthis.status;\n\t\tthis.items = {};\n\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\tprivate wsConnect(): void {\n\t\tthis.log.info(`Connection to Heatpump on ${this.config.ipaddress}:${this.config.port}`);\n\t\tthis.ws.connect(`ws://${this.config.ipaddress}:${this.config.port}`, \"Lux_WS\");\n\t}\n\n\tprivate async wsCheckStatus(): Promise<void> {\n\t\tif (this.connection && this.connection.connected) {\n\t\t\tthis.log.debug(\"Connection is OK\");\n\t\t\tthis.setState(\"info.connection\", { val: true, ack: true });\n\t\t} else {\n\t\t\tthis.setState(\"info.connection\", { val: false, ack: true });\n\t\t\tthis.wsReconnect(\"Lost Connection\");\n\t\t}\n\t}\n\n\tprivate wsReconnect(error: string): void {\n\t\tthis.log.error(\"Connect failed: \" + error.toString());\n\t\tthis.log.info(\"Trying to reconnect...\");\n\t\tthis.wsConnect();\n\t}\n\n\tprivate async wsHandleError(error: string): Promise<void> {\n\t\tthis.wsReconnect(error.toString());\n\t}\n\n\tprivate async wsOnClose(): Promise<void> {\n\t\tthis.wsReconnect(\"Websocket closed\");\n\t}\n\n\tprivate async wsHandleConnection(connection: any): Promise<void> {\n\t\tif (connection.connected) {\n\t\t\tthis.connection = connection;\n\t\t\tthis.log.info(\"Successfully connected to heatpump\");\n\n\t\t\t// handle connection events\n\t\t\tthis.connection.on(\"error\", this.wsHandleError.bind(this));\n\t\t\tthis.connection.on(\"close\", this.wsOnClose.bind(this));\n\t\t\tthis.connection.on(\"message\", this.wsParseMessage.bind(this));\n\t\t}\n\t}\n\n\tasync wsPollData(): Promise<void> {\n\t\tthis.log.debug(\"Polling Data\");\n\t\tif (this.connection && this.connection.connected) {\n\t\t\tthis.connection.send(`LOGIN;${this.config.password}`);\n\t\t}\n\t}\n\n\tasync SetDatapoint(name: string, value: any): Promise<void> {\n\t\tlet type: ioBroker.CommonType = \"mixed\";\n\t\tlet unit = \"\";\n\t\tlet val;\n\t\tif (/^-?\\s*[\\d.-]+\\s*[^\\d]+$/.test(value) && !/^\\d+:/.test(value)) {\n\t\t\tconst matches = value.match(/^(-?\\s*[\\d.-]+)\\s*([^\\d]+)$/);\n\t\t\tval = parseFloat(matches[1]);\n\t\t\tunit = matches[2];\n\t\t\ttype = \"mixed\";\n\t\t} else {\n\t\t\tval = value;\n\t\t}\n\t\tawait this.setObjectNotExistsAsync(`${name}`, {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: `${name}`,\n\t\t\t\ttype: `${type}`,\n\t\t\t\trole: \"state\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t\tunit: unit,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tthis.setState(`${name}`, { val: val, ack: true });\n\t}\n\n\tasync wsParseMessage(message: any): Promise<void> {\n\t\tlet json;\n\t\ttry {\n\t\t\tjson = JSON.parse(message.utf8Data.toString());\n\t\t\tif (json.type == \"Navigation\") {\n\t\t\t\tthis.items = json.items;\n\t\t\t\tfor (const item of json.items) {\n\t\t\t\t\tthis.log.debug(`Polling ${item.name}`);\n\t\t\t\t\tthis.connection.send(`GET;${item.id}`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (json.type == \"Content\") {\n\t\t\t\tif (typeof json.name !== \"undefined\") {\n\t\t\t\t\tconst topfolder = json.name.replace(/\\./g, \"\");\n\t\t\t\t\t// Poll only Informationen\n\t\t\t\t\tif (json.name == \"Informationen\") {\n\t\t\t\t\t\tfor (const item of json.items) {\n\t\t\t\t\t\t\tconst subname = item.name.replace(/\\./g, \"\");\n\t\t\t\t\t\t\tthis.log.debug(`Found Section: ${topfolder}.${subname}`);\n\t\t\t\t\t\t\tif (Array.isArray(item.items)) {\n\t\t\t\t\t\t\t\tfor (const datapoint of item.items) {\n\t\t\t\t\t\t\t\t\t//const dpName = `${topfolder}.${subname}.${datapoint.name.replace(/\\./g, \"\")}`;\n\t\t\t\t\t\t\t\t\tconst dpName = `${subname}.${datapoint.name.replace(/\\./g, \"\")}`;\n\t\t\t\t\t\t\t\t\tif (Array.isArray(datapoint.items)) {\n\t\t\t\t\t\t\t\t\t\tfor (const subdatapoint of datapoint.items) {\n\t\t\t\t\t\t\t\t\t\t\tconst subdpName = `${dpName}.${subdatapoint.name.replace(/\\./g, \"\")}`;\n\t\t\t\t\t\t\t\t\t\t\tawait this.SetDatapoint(subdpName, subdatapoint.value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tawait this.SetDatapoint(dpName, datapoint.value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState(\"info.connection\", false, true);\n\n\t\tthis.ws.on(\"connect\", this.wsHandleConnection.bind(this));\n\t\tthis.wsConnect();\n\t\tthis.wsPollData.bind(this);\n\t\tthis.poller = setInterval(this.wsPollData.bind(this), this.config.polltime * 1000);\n\t\tthis.status = setInterval(this.wsCheckStatus.bind(this), 1000);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tclearInterval(this.poller);\n\t\t\tclearInterval(this.status);\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Alphainnotec(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Alphainnotec())();\n}\n"],
  "mappings": "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",
  "names": []
}
